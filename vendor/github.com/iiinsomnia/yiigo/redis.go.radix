package yiigo

import (
	"encoding/json"
	"errors"
	"fmt"
	"reflect"
	"sync"
	"time"

	"github.com/mediocregopher/radix.v2/pool"
	"github.com/mediocregopher/radix.v2/redis"
	toml "github.com/pelletier/go-toml"
)

type redisConf struct {
	Name     string `toml:"name"`
	Host     string `toml:"host"`
	Port     int    `toml:"port"`
	Password string `toml:"password"`
	Database int    `toml:"database"`
	Timeout  int    `toml:"connTimeout"`
	PoolSize bool   `toml:"poolSize"`
}

var (
	// Redis default connection pool
	Redis    *pool.Pool
	redisMap sync.Map
)

func initRedis() error {
	var err error

	result := Env.Get("redis")

	switch node := result.(type) {
	case *toml.Tree:
		conf := &redisConf{}
		err = node.Unmarshal(conf)

		if err != nil {
			break
		}

		err = initSingleRedis(conf)
	case []*toml.Tree:
		conf := make([]*redisConf, 0, len(node))

		for _, v := range node {
			c := &redisConf{}
			err = v.Unmarshal(c)

			if err != nil {
				break
			}

			conf = append(conf, c)
		}

		err = initMultiRedis(conf)
	default:
		return errors.New("redis error config")
	}

	if err != nil {
		return fmt.Errorf("redis error: %s", err.Error())
	}

	return nil
}

func initSingleRedis(conf *redisConf) error {
	var err error

	Redis, err = redisDial(conf)

	return err
}

func initMultiRedis(conf []*redisConf) error {
	for _, v := range conf {
		p, err := redisDial(v)

		if err != nil {
			return err
		}

		redisMap.Store(v.Name(), p)
	}

	if v, ok := redisMap.Load("default"); ok {
		Redis = v.(*pool.Pool)
	}

	return nil
}

func redisDial(conf *redisConf) (*pool.Pool, error) {
	df := func(network, addr string) (*redis.Client, error) {
		client, err := redis.DialTimeout(network, addr, time.Duration(conf.Timeout)*time.Millisecond)

		if err != nil {
			return nil, err
		}

		if conf.Password != "" {
			// 密码验证
			if err = client.Cmd("AUTH", conf.Password).Err; err != nil {
				client.Close()

				return nil, err
			}
		}

		if conf.Database != 0 {
			// 选择数据库
			if err = client.Cmd("SELECT", conf.Database).Err; err != nil {
				client.Close()

				return nil, err
			}
		}

		return client, nil
	}

	p, err := pool.NewCustom("tcp", fmt.Sprintf("%s:%d", conf.Host, conf.Port), conf.PoolSize, df)

	if err != nil {
		return nil, err
	}

	return p, nil
}

// RedisPool get redis connection pool
func RedisPool(conn ...string) (*pool.Pool, error) {
	c := "default"

	if len(conn) > 0 {
		c = conn[0]
	}

	schema := fmt.Sprintf("redis.%s", c)

	v, ok := redisMap.Load(schema)

	if !ok {
		return nil, fmt.Errorf("redis %s is not connected", schema)
	}

	return v.(*pool.Pool), nil
}

// ScanJSON scans json string to the struct or struct slice pointed to by dest
func ScanJSON(reply *redis.Resp, dest interface{}) error {
	v := reflect.Indirect(reflect.ValueOf(dest))

	var err error

	switch v.Kind() {
	case reflect.Struct:
		err = scanJSONObj(reply, dest)
	case reflect.Slice:
		err = scanJSONSlice(reply, dest)
	}

	return err
}

func scanJSONObj(reply *redis.Resp, dest interface{}) error {
	bytes, err := reply.Bytes()

	if err != nil {
		return err
	}

	err = json.Unmarshal(bytes, dest)

	if err != nil {
		return err
	}

	return nil
}

func scanJSONSlice(reply *redis.Resp, dest interface{}) error {
	bytes, err := reply.ListBytes()

	if err != nil {
		return err
	}

	if len(bytes) == 0 {
		return nil
	}

	v := reflect.Indirect(reflect.ValueOf(dest))

	if v.Kind() != reflect.Slice {
		return errors.New("the dest must be a slice")
	}

	t := v.Type()
	v.Set(reflect.MakeSlice(t, 0, 0))

	for _, b := range bytes {
		elem := reflect.New(t.Elem()).Elem()
		err := json.Unmarshal(b, elem.Addr().Interface())

		if err != nil {
			return err
		}

		v.Set(reflect.Append(v, elem))
	}

	return nil
}
